--------------------------------------------------------------Stacks--------------------------------------------------------------------------

*#*#
	4.1 What is a Stack?

	A stack is a simple data structure used for storing data (similar to Linked Lists). In a stack, the
	order in which the data arrives is important. A pile of plates in a cafeteria is a good example of a
	stack. The plates are added to the stack as they are cleaned and they are placed on the top. When a
	plate, is required it is taken from the top of the stack. The first plate placed on the stack is the last
	one to be used.
	
	Definition: A stack is an ordered list in which insertion and deletion are done at one end, called
	top. The last element inserted is the first one to be deleted. Hence, it is called the Last in First out
	(LIFO) or First in Last out (FILO) list.
	
*#*#

	Special names are given to the two changes that can be made to a stack. When an element is
	inserted in a stack, the concept is called push, and when an element is removed from the stack, the
	concept is called pop. Trying to pop out an empty stack is called underflow and trying to push an
	element in a full stack is called overflow. 
	
*#*#

	MAIN STACK OPERATIONS
	• Push (int data): Inserts data onto stack.
	• int Pop(): Removes and returns the last inserted element from the stack.
	
	AUXILIARY STACK OPERATIONS
	• int Top(): Returns the last inserted element without removing it.
	• int Size(): Returns the number of elements stored in the stack.
	• int IsEmptyStack(): Indicates whether any elements are stored in the stack or not.
	• int IsFullStack(): Indicates whether the stack is full or not.
	
*#*#

	4.4 APPLICATIONS
	
	Following are some of the applications in which stacks play an important role.
	
		DIRECT APPLICATIONS
		
			• Balancing of symbols
			• Infix-to-postfix conversion
			• Evaluation of postfix expression
			• Implementing function calls (including recursion)
			• Finding of spans (finding spans in stock markets, refer to Problems section)
			• Page-visited history in a Web browser [Back Buttons]
			• Undo sequence in a text editor
			• Matching Tags in HTMLand XML
			
		INDIRECT APPLICATIONS
		
			• Auxiliary data structure for other algorithms (Example: Tree traversal algorithms)
			• Component of other data structures (Example: Simulating queues, refer Queues
			  chapter)
			  
*#*#

	IMPLEMENTATION

	There are many ways of implementing stack ADT; below are the commonly used methods.• Simple array based implementation

		• Dynamic array based implementation
		• Linked lists implementation
		
*#*#

	SIMPLE ARRAY IMPLEMENTATION
	
	This implementation of stack ADT uses an array. In the array, we add elements from left to right
	and use a variable to keep track of the index of the top element.
	
	LIMITATIONS
	
	The maximum size of the stack must first be defined and it cannot be changed. Trying to push a
	new element into a full stack causes an implementation-specific exception.