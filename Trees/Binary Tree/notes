--------------------------------------------------------------Binary Trees--------------------------------------------------------------------

*#*#
	A tree is called binary tree if each node has zero child, one child or two children. Empty tree is
	also a valid binary tree. We can visualize a binary tree as consisting of a root and two disjoint
	binary trees, called the left and right subtrees of the root.
	
*#*#
	Types of Binary Trees:-
	
	Strict Binary Tree: A binary tree is called strict binary tree if each node has exactly two
	children or no children.
	
	Full Binary Tree: A binary tree is called full binary tree if each node has exactly two children
	and all leaf nodes are at the same level.
	
	Complete Binary Tree: Before defining the complete binary tree, let us assume that the height of
	the binary tree is h. In complete binary trees, if we give numbering for the nodes by starting at the
	root (let us say the root node has 1) then we get a complete sequence from 1 to the number of
	nodes in the tree. While traversing we should give numbering for NULL pointers also. A binary
	tree is called complete binary tree if all leaf nodes are at height h or h – 1 and also without any
	missing number in the sequence.

*#*#
	Properties of Binary Trees
	
	• The number of nodes n in a full binary tree is 2h+1 – 1. Since, there are h levels we
		need to add all nodes at each level [20 + 21+ 22 + ··· + 2h = 2h+1 – 1].
	• The number of nodes n in a complete binary tree is between 2^h (minimum) and 2^h+1
	  – 1 (maximum). For more information on this, refer to Priority Queues chapter.
	• The number of leaf nodes in a full binary tree is 2h.
	• The number of NULL links (wasted pointers) in a complete binary tree of n nodes is
	  n + 1.
	  
*#*#
	Operations on Binary Trees
	
		Basic Operations
		
			• Inserting an element into a tree
			• Deleting an element from a tree
			• Searching for an element
			• Traversing the tree
			
		Auxiliary Operations
		
			• Finding the size of the tree
			• Finding the height of the tree
			• Finding the level which has maximum sum
			• Finding the least common ancestor (LCA) for a given pair of nodes, and many more
			
*#*#
	Applications of Binary Trees
	
	Following are the some of the applications where binary trees play an important role:
	
		• Expression trees are used in compilers.
		• Huffman coding trees that are used in data compression algorithms.
		• Binary Search Tree (BST), which supports search, insertion and deletion on a
		  collection of items in O(logn) (average).
		• Priority Queue (PQ), which supports search and deletion of minimum (or maximum)
		  on a collection of items in logarithmic time (in worst case).
		  
*#*#
	Binary Tree Traversals
	
	In order to process trees, we need a mechanism for traversing them, and that forms the subject of
	this section. The process of visiting all nodes of a tree is called tree traversal. Each node is
	processed only once but it may be visited more than once. As we have already seen in linear data
	structures (like linked lists, stacks, queues, etc.), the elements are visited in sequential order. But,
	in tree structures there are many different ways.
	
	Tree traversal is like searching the tree, except that in traversal the goal is to move through the
	tree in a particular order. In addition, all nodes are processed in the traversal but searching
	stops when the required node is found.
	
*#*#
	Traversal Possibilities
	
	Starting at the root of a binary tree, there are three main steps that can be performed and the order
	in which they are performed defines the traversal type. These steps are: performing an action on
	the current node (referred to as “visiting” the node and denoted with “D”), traversing to the left
	child node (denoted with “L”), and traversing to the right child node (denoted with “R”). This
	process can be easily described through recursion. Based on the above definition there are 6
	possibilities:
	
		1. LDR: Process left subtree, process the current node data and then process right
		subtree
		2. LRD: Process left subtree, process right subtree and then process the current node
		data
		3. DLR: Process the current node data, process left subtree and then process right
		subtree
		4. DRL: Process the current node data, process right subtree and then process left
		subtree
		5. RDL: Process right subtree, process the current node data and then process left
		subtree
		6. RLD: Process right subtree, process left subtree and then process the current node
		data
		
*#*#
	Classifying the Traversals
	
	The sequence in which these entities (nodes) are processed defines a particular traversal method.
	The classification is based on the order in which current node is processed. That means, if we are
	classifying based on current node (D) and if D comes in the middle then it does not matter
	whether L is on left side of D or R is on left side of D.
	
	Similarly, it does not matter whether L is on right side of D or R is on right side of D. Due to this,
	the total 6 possibilities are reduced to 3 and these are:
	
		• Preorder (DLR) Traversal
		• Inorder (LDR) Traversal
		• Postorder (LRD) Traversal
		
	There is another traversal method which does not depend on the above orders and it is:
	
		• Level Order Traversal: This method is inspired from Breadth First Traversal (BFS
		  of Graph algorithms)
		  
*#*#
	PreOrder Traversal
	
	In preorder traversal, each node is processed before (pre) either of its subtrees. This is the
	simplest traversal to understand. However, even though each node is processed before the
	subtrees, it still requires that some information must be maintained while moving down the tree.
	In the example above, 1 is processed first, then the left subtree, and this is followed by the right
	subtree.
	
	Therefore, processing must return to the right subtree after finishing the processing of the left
	subtree. To move to the right subtree after processing the left subtree, we must maintain the rootinformation. The obvious ADT for such information is a stack. Because of its LIFO structure, it is
	possible to get the information about the right subtrees back in the reverse order.
	
	Preorder traversal is defined as follows:
	
		• Visit the root.
		• Traverse the left subtree in Preorder.
		• Traverse the right subtree in Preorder.
		